define('dataSource',[],
	function () {
		var domain = '/',
			urlPatterns = {
				user: domain + 'user',
				countNewPrivateMessages: domain + 'privateMessages/count',
				publicMessages: domain + 'publicMessages',
				message: domain + 'publicMessages/message',
				userUpdate: domain + 'user/update'
			};

		function createHttpGet (url, callback) {
			var xhr = new XMLHttpRequest();
			xhr.open('get', url, true);
			xhr.onreadystatechange = function() {
				if (xhr.readyState == 4) {
					var resp = JSON.parse(xhr.responseText);
					( callback ) && callback(resp, xhr.status);
				}
			}
			xhr.send();
		}

		function createHttpPost (data, url, callback) {
			var xhr = new XMLHttpRequest();
			var params = JSON.stringify(data);
			xhr.open("POST", url, true);

			//Send the proper header information along with the request
			xhr.setRequestHeader("Content-type", "application/json");

			xhr.onreadystatechange = function() {
				//Call a function when the state changes.
			    if (xhr.readyState == 4) {
			    	console.log(xhr.responseText)
					var resp = JSON.parse(xhr.responseText);
					( callback ) && callback(resp, xhr.status);
				}
			}
			xhr.send(params);
		}

		return {
			getUserName: function (callback) {
				createHttpGet(urlPatterns.user, callback);
			},
			countNewPrivateMessages: function (callback) {
				createHttpRequest('get', urlPatterns.countNewPrivateMessages, callback);
				createHttpGet(urlPatterns.user, callback);
			},
			getMessages: function (time, limit, callback) {
				var url = urlPatterns.publicMessages + '?';
				( time ) && ( url += 'time=' + time + '&' );
				( limit ) && ( url += 'limit=' + limit );

				createHttpGet(url, callback);
			},
			publishPublicMessage: function (message, callback) {
				createHttpPost({ message: message }, urlPatterns.message, callback);
			},
			updateName: function (name, callback) {
				createHttpPost({ name: name }, urlPatterns.userUpdate, callback);
			}
		};
	}
);
define('helpers',[],
	function () {
		return {
			extend: function (obj1, obj2) {
				obj1 = obj1 || {};
				obj2 = obj2 || {};

				var result = {},
					opt = null;

				for ( opt in obj2 ) {
					result[opt] = obj2[opt];
				}

				for ( opt in obj1 ) {
					result[opt] = obj1[opt];
				}

				return result;
			}
		}
	}
);
define('elements/userName',['dataSource', 'helpers'], 
	function (DataSource, Helpers) {
		function UserName (options) {
			this.defaults = {
				parentSelector: "header",
				elementSelector: ".name a",
				inputSelector: '#name',
				buttonSelector: 'button.change'
			};

			this.init(options);
		}

		UserName.prototype.init = function (options) {
			this.opts = Helpers.extend(options, this.defaults);

			this.opts.parent = document.querySelector(this.opts.parentSelector);
			this.opts.element = this.opts.parent.querySelector(this.opts.elementSelector);
			this.opts.input = document.querySelector(this.opts.inputSelector);
			this.opts.button = document.querySelector(this.opts.buttonSelector);
		}

		UserName.prototype.appendName = function () {
			var self = this;

			DataSource.getUserName(function (response, status) {
				if ( status == 200 ) {
					self.opts.element.innerHTML = response.name;
				}
			});
		}

		UserName.prototype.listenChangeName = function () {
			var self = this;

			this.opts.button.addEventListener('click', function () {
				var newName = self.opts.input.value;

				if ( newName ) {
					DataSource.updateName(newName, function () {
						
					});
				}
			});
		}

		return UserName;
	}
);
define('elements/privateMessages',['dataSource', 'helpers'], 
	function (DataSource, Helpers) {
		function PrivateMessages () {
			this.defaults = {
				parentSelector: "header",
				linkSelector: ".private-messages"
			};
		}

		PrivateMessages.prototype.init = function (options) {
			this.opts = Helpers.extend(options, this.defaults);

			this.opts.parent = document.querySelector(this.opts.parentSelector);
			this.opts.link = this.opts.parent.querySelector(this.opts.linkSelector);
		}

		PrivateMessages.prototype.appendCount = function () {
			var self = this;

			DataSource.countNewPrivateMessages(function (response) {
				self.opts.link.innerHTML = response.count;
			});
		}

		return PrivateMessages;
	}
);
define('elements/header',['elements/userName', 'elements/privateMessages'],
	function (UserName, PrivateMessages) {
		function Header () {
			var userName = new UserName(),
				privateMessages = new PrivateMessages();
				
			userName.appendName();
		}

		return Header;
	}
);
define('elements/publicMessages',['helpers', 'dataSource'], 
	function (Helpers, DataSource) {
		function PublicMessages () {
			this.defaults = {
				limit: 10,
				isEnd: false,
				dateLastMessage: null,
				wrapperSelector: '.messages ul',
				textareaSelector: 'footer textarea',
				buttonSelector: 'footer button',
				messageTemplate: '<div>' +
									'<span class="author"><a href="$1">$2</a></span>' +
									'<span class="date">$3</span>' +
								  '</div>' +
								  '<div class="message">$4</div>'
			};

			this.init();
		}

		PublicMessages.prototype.init = function (options) {
			this.opts = Helpers.extend(options, this.defaults);

			this.opts.wrapper = document.querySelector(this.opts.wrapperSelector);
			this.opts.textarea = document.querySelector(this.opts.textareaSelector);
			this.opts.button = document.querySelector(this.opts.buttonSelector);
		}

		PublicMessages.prototype.getOldMessages = function () {
			var self = this;

			if ( !self.opts.isEnd ) {
				DataSource.getMessages(this.opts.dateLastMessage, -this.opts.limit, function (response, status) {
					if ( status == 200 ) {
						for ( var i = response.messages.length - 1; i >= 0 ; i-- ) {
							self._addMessageOnPage(response.messages[i]);
						}
					}
					self.opts.isEnd = response.isEnd;
				});
			}
		}

		PublicMessages.prototype.listenAddMessage = function () {
			var self = this;

			this.opts.button.addEventListener('click', function () {
				var text = self.opts.textarea.value;
				if ( text ) {
					DataSource.publishPublicMessage(text, function (response, status) {
						if ( status == 201 ) {
							self._addMessageOnPage(response.message);
							self.opts.textarea.value = '';
						}
					});
				}
			});
		}

		PublicMessages.prototype._addMessageOnPage = function (respMes) {
			var li = document.createElement('li');

			li.innerHTML = 
				this.opts.messageTemplate
					.replace('$1', respMes.author.id)
					.replace('$2', respMes.author.name)
					.replace('$3', respMes.time)
					.replace('$4', respMes.message);

			this.opts.wrapper.appendChild(li);
		}

		return PublicMessages;
	}
);
define('pages/main',['elements/header', 'elements/publicMessages'], 
	function (Header, PublicMessages) {
		function MainPage() {
			var header = new Header(),
				publicMessages = new PublicMessages();

			publicMessages.getOldMessages()
			publicMessages.listenAddMessage();
		}

		return MainPage;
	}
);
define('pages/privateMessages',[],
	function () {
		function PrivateMessagesPage () {
			
		}

		return PrivateMessagesPage;
	}
);
define('pages/user',['elements/header', 'elements/userName'], 
	function (Header, UserName) {
		function UserPage() {
			var header = new Header(),
				userName = new UserName();

			//userName.
		}

		return UserPage;
	}
);
define('main',['pages/main', 'pages/privateMessages', 'pages/user'], 
	function (MainPage, PrivateMessagesPage, UserPage) {
		var pages = {
			'main': MainPage,
			'private-messages': PrivateMessagesPage,
			'user': UserPage
		};

		var body = document.querySelector('body'),
			bodyClass = body.className,
			currentPage = null;

		for ( var page in pages ) {
			if ( bodyClass.indexOf(page) + 1 ) {
				currentPage = pages[page];
				break;
			}
		}
		if ( !currentPage ) {
			return;
		}

		var page = new currentPage();
	}
);
require.config({
	deps: ['main']
});
define("config", function(){});

