define('dataSource',[],
	function() {
		var domain = '/',
			urlPatterns = {
				user: domain + 'user',
				userInfo: domain + 'user/id/$1/info',
				userLoaction: domain + 'user/geolocate',
				countNewPrivateMessages: domain + 'privateMessages/count',
				publicMessages: domain + 'publicMessages',
				message: domain + 'publicMessages/message',
				userUpdate: domain + 'user/update',
				dialogs: domain + 'dialogs/all',
				dialog: domain + 'dialogs/dialog/id/$1'
			};

		function createHttpGet(url, callback) {
			var xhr = new XMLHttpRequest();
			xhr.open('get', url, true);
			xhr.onreadystatechange = function() {
				if (xhr.readyState == 4) {
					var resp = (xhr.responseText) ? JSON.parse(xhr.responseText) : {};
					(callback) && callback(resp, xhr.status);
				}
			}
			xhr.send();
		}

		function createHttpPost(data, url, callback) {
			var xhr = new XMLHttpRequest();
			var params = JSON.stringify(data);
			xhr.open("POST", url, true);

			//Send the proper header information along with the request
			xhr.setRequestHeader("Content-type", "application/json");

			xhr.onreadystatechange = function() {
				//Call a function when the state changes.
				if (xhr.readyState == 4) {
					var resp = (xhr.responseText) ? JSON.parse(xhr.responseText) : {};
					(callback) && callback(resp, xhr.status);
				}
			}
			xhr.send(params);
		}

		return {
			getUserName: function(callback) {
				createHttpGet(urlPatterns.user, callback);
			},
			getUserNameById: function(id, callback) {
				var url = urlPatterns.userInfo.replace('$1', id);
				createHttpGet(url, callback);
			},
			countNewPrivateMessages: function(callback) {
				createHttpGet(urlPatterns.countNewPrivateMessages, callback);
			},
			getMessages: function(time, limit, callback) {
				var url = urlPatterns.publicMessages + '?';
				(time) && (url += 'time=' + time + '&');
				(limit) && (url += 'limit=' + limit);

				createHttpGet(url, callback);
			},
			publishPublicMessage: function(message, callback) {
				createHttpPost({
					message: message
				}, urlPatterns.message, callback);
			},
			updateName: function(name, callback) {
				createHttpPost({
					name: name
				}, urlPatterns.userUpdate, callback);
			},
			getDialogs: function(callback) {
				createHttpGet(urlPatterns.dialogs, callback);
			},
			getDialog: function(id, time, limit, callback) {
				var url = urlPatterns.dialog.replace('$1', id) + '?';
				(time) && (url += 'time=' + time + '&');
				(limit) && (url += 'limit=' + limit);
				createHttpGet(url, callback);
			},
			publishPrivateMessage: function(id, message, callback) {
				var url = urlPatterns.dialog.replace('$1', id);

				createHttpPost({
					message: message
				}, url, callback);
			},
			publishLocation: function(location, callback) {
				createHttpPost(location, urlPatterns.userLoaction, callback);
			}
		};
	}
);
define('helpers',[],
	function () {
		return {
			extend: function (obj1, obj2) {
				obj1 = obj1 || {};
				obj2 = obj2 || {};

				var result = {},
					opt = null;

				for ( opt in obj2 ) {
					result[opt] = obj2[opt];
				}

				for ( opt in obj1 ) {
					result[opt] = obj1[opt];
				}

				return result;
			}
		}
	}
);
define('elements/userName',['dataSource', 'helpers'], 
	function (DataSource, Helpers) {
		function UserName (options) {
			this.defaults = {
				parentSelector: "header",
				elementSelector: ".name",
				inputSelector: '#name',
				buttonSelector: '.change',
				errorSelector: '.error'
			};

			this.init(options);
		}

		UserName.prototype.init = function (options) {
			this.opts = Helpers.extend(options, this.defaults);

			this.opts.parent = document.querySelector(this.opts.parentSelector);
			this.opts.element = this.opts.parent.querySelector(this.opts.elementSelector);
			this.opts.input = document.querySelector(this.opts.inputSelector);
			this.opts.button = document.querySelector(this.opts.buttonSelector);
			this.opts.error = document.querySelector(this.opts.errorSelector);
		}

		UserName.prototype.appendName = function () {
			var self = this;

			DataSource.getUserName(function (response, status) {
				if ( status == 200 ) {
					self.opts.element.innerHTML = response.name;
				}
			});
		}

		UserName.prototype.listenChangeName = function () {
			var self = this;

			this.opts.button.addEventListener('click', function () {
				var newName = self.opts.input.value;

				if ( newName ) {
					DataSource.updateName(newName, function (response, status) {
						switch ( status ) {
							case 200:
								self.updateName(response.name);
								self.opts.input.value = "";
								self.opts.error.style.display = "none";
								break;
							case 403:
								self.opts.error.style.display = "block";
								self.opts.error.innerHTML = response.message;
								break;
						} 
					});
				}
			});
		}

		UserName.prototype.updateName = function (name) {
			this.opts.element.innerHTML = name;
		}

		return UserName;
	}
);
define('elements/privateMessages',['dataSource', 'helpers'], 
	function (DataSource, Helpers) {
		function PrivateMessages () {
			this.defaults = {
				parentSelector: "header",
				linkSelector: ".private-messages-count a",
				loadMoreSelector: '.load-more',
				wrapperSelector: 'section ul',
				textareaSelector: '#message',
				buttonSelector: 'footer .send-message',
				interlocutorSelector: '.interlocutor',
				limit: 10,
				isEnd: false,
				dateLastMessage: null,
				dateFirstMessage: new Date(),
				commonDialogTemplate: '<li><core-item icon="account-circle">' +
										'<div flex>'+
											'<a class="message-author" href="/private-messages.html/#$1" target="_self">$2</a>'+
											'<div class="number-of-messages">Number of messages: $3</div>'+
										'</div>'+
									 '</core-item></li>',
				dialogTemplate: '<span class="message"><paper-shadow z="1">$2</paper-shadow></span>'
			};

			this.init();
		}

		PrivateMessages.prototype.init = function (options) {
			this.opts = Helpers.extend(options, this.defaults);

			this.opts.parent = document.querySelector(this.opts.parentSelector);
			this.opts.link = document.querySelector(this.opts.linkSelector);
			this.opts.loadMore = document.querySelector(this.opts.loadMoreSelector);
			this.opts.wrapper = document.querySelector(this.opts.wrapperSelector);
			this.opts.textarea = document.querySelector(this.opts.textareaSelector);
			this.opts.button = document.querySelector(this.opts.buttonSelector);
			this.opts.interlocutor = document.querySelector(this.opts.interlocutorSelector);
		}

		PrivateMessages.prototype.appendCount = function () {
			var self = this;

			DataSource.countNewPrivateMessages(function (response) {
				self.opts.link.innerHTML = response.count || 0;
			});
		}

		PrivateMessages.prototype.appendAllDialogs = function () {
			var self = this;

			DataSource.getDialogs(function (response, status) {
				if ( status == 200 ) {
					var result = "";
					for ( var i = 0; i < response.dialogs.length; i++ ) {
						result += 
							self.opts.commonDialogTemplate
								.replace('$1', response.dialogs[i].interlocutor._id)
								.replace('$2', response.dialogs[i].interlocutor.name)
								.replace('$3', response.dialogs[i].messages.all);

					}
					self.opts.wrapper.innerHTML = result;
				}
			});
		}

		PrivateMessages.prototype.loadOldMessages = function (methodInsert) {
			var self = this,
				id = window.location.hash.substring(1);

			if ( !self.opts.isEnd ) {
				DataSource.getDialog(id, this.opts.dateLastMessage, -this.opts.limit, function (response, status) {
					if ( status == 200 ) {
						var len = response.messages.length;
						if ( methodInsert === 'prepand' ) {
							for ( var i = 0; i < len ; i++ ) {
								self._addMessageOnPage(response.messages[i], methodInsert);
							}
						}
						else {
							for ( var i = len - 1; i >= 0 ; i-- ) {
								self._addMessageOnPage(response.messages[i], methodInsert);
							}
						}
						( len ) && ( self.opts.dateLastMessage = response.messages[len - 1].time );
						self.opts.isEnd = response.end;
						( response.end ) && ( self.opts.loadMore.style.display = "none" );
					}
				});
			}
		}

		PrivateMessages.prototype._addMessageOnPage = function (respMes, position) {
			position = position || 'append';

			var li = document.createElement('li');

			if ( respMes.sender ) {
				li.className = 'my';
			}

			li.innerHTML = 
				this.opts.dialogTemplate
					.replace('$2', respMes.message);

			if ( position === 'append' ) {
				this.opts.wrapper.appendChild(li);
			}
			else {
				var children = this.opts.wrapper.childNodes;
				if ( !children.length ) {
					this.opts.wrapper.appendChild(li);
				}
				else {
					this.opts.wrapper.insertBefore(li, children[0]);
				}
			}
		}

		PrivateMessages.prototype.appendDialogMessages = function () {
			var self = this,
				id = window.location.hash;

			DataSource.getDialog(id, self.opts.dateLastMessage, self.opts.limit, function (response, status) {
				if ( status == 200 ) {

				}
			});
		}

		PrivateMessages.prototype.appendInterlocutorName = function () {
			var self = this,
				id = (window.location.hash) ? window.location.hash.substring(1) : '';

			DataSource.getUserNameById(id, function (response, status) {
				if ( status == 200 ) {
					self.opts.interlocutor.innerHTML += response.user.name;
				}
			});
		}

		PrivateMessages.prototype.listenAddMessage = function () {
			var self = this,
				id = window.location.hash.substring(1);

			this.opts.button.addEventListener('click', function () {
				var text = self.opts.textarea.value;
				if ( text ) {
					DataSource.publishPrivateMessage(id, text, function (response, status) {
						if ( status == 201 ) {
							//self._addMessageOnPage(response.message);
							self.opts.textarea.value = '';
						}
					});
				}
			});
		}

		PrivateMessages.prototype.listenChat = function () {
			var self = this,
				id = window.location.hash.substring(1);

			DataSource.getDialog(id, self.opts.dateFirstMessage, this.opts.limit, function (response, status) {
				if ( status == 200 ) {
					var len = response.messages.length;
					for ( var i = len - 1; i >= 0 ; i-- ) {
						self._addMessageOnPage(response.messages[i]);
					}

					if ( len ) {
						if ( !self.opts.dateLastMessage ) {
							self.opts.dateLastMessage = response.messages[len - 1].time;
						}

						self.opts.dateFirstMessage = response.messages[0].time;
					}
				}

				self.listenChat();
			});
		}

		PrivateMessages.prototype.listenLoadMessages = function () {
			var self = this;

			this.opts.loadMore.addEventListener('click', function () {
				self.loadOldMessages('prepand');
			});
		}

		return PrivateMessages;
	}
);
define('elements/header',['elements/userName', 'elements/privateMessages'],
	function (UserName, PrivateMessages) {
		function Header () {
			var userName = new UserName(),
				privateMessages = new PrivateMessages();
				
			userName.appendName();
			// privateMessages.appendCount();
		}

		return Header;
	}
);
define('elements/publicMessages',['helpers', 'dataSource'], 
	function (Helpers, DataSource) {
		function PublicMessages () {
			this.defaults = {
				limit: 10,
				isEnd: false,
				dateLastMessage: null,
				dateFirstMessage: new Date(),
				wrapperSelector: '.messages ul',
				textareaSelector: '#message',
				buttonSelector: 'footer .send-message',
				loadMoreSelector: '.load-more',
				messageTemplate: '<core-item icon="input">' +
									'<div flex>'+
										'<a class="message-author" href="/private-messages.html/#$1" target="_self">$2</a>'+
										'<div class="date">$3</div>'+
										'<div class="message-text">$4</div>'+
									'</div>'+
								 '</core-item>'
			};

			this.init();
		}

		PublicMessages.prototype.init = function (options) {
			this.opts = Helpers.extend(options, this.defaults);

			this.opts.wrapper = document.querySelector(this.opts.wrapperSelector);
			this.opts.textarea = document.querySelector(this.opts.textareaSelector);
			this.opts.button = document.querySelector(this.opts.buttonSelector);
			this.opts.loadMore = document.querySelector(this.opts.loadMoreSelector);
		}

		PublicMessages.prototype.getOldMessages = function (methodInsert) {
			var self = this;

			if ( !self.opts.isEnd ) {
				DataSource.getMessages(this.opts.dateLastMessage, -this.opts.limit, function (response, status) {
					if ( status == 200 ) {
						var len = response.messages.length;
						if ( methodInsert === 'prepand' ) {
							for ( var i = 0; i < len ; i++ ) {
								self._addMessageOnPage(response.messages[i], methodInsert);
							}
						}
						else {
							for ( var i = len - 1; i >= 0 ; i-- ) {
								self._addMessageOnPage(response.messages[i], methodInsert);
							}
						}
						( len ) && ( self.opts.dateLastMessage = response.messages[len - 1].time );
						self.opts.isEnd = response.end;
						( response.end ) && ( self.opts.loadMore.style.display = "none" );
					}
				});
			}
		}

		PublicMessages.prototype.listenAddMessage = function () {
			var self = this;

			this.opts.button.addEventListener('click', function () {
				var text = self.opts.textarea.value;
				if ( text ) {
					DataSource.publishPublicMessage(text, function (response, status) {
						if ( status == 201 ) {
							//self._addMessageOnPage(response.message);
							self.opts.textarea.value = '';
						}
					});
				}
			});
		}

		PublicMessages.prototype.listenLoadMessages = function () {
			var self = this;

			this.opts.loadMore.addEventListener('click', function () {
				self.getOldMessages('prepand');
			});
		}

		PublicMessages.prototype._addMessageOnPage = function (respMes, position) {
			position = position || 'append';

			var li = document.createElement('li'),
				messageTime = new Date(respMes.time),
				time = messageTime.getDay() + '.' + (messageTime.getMonth() + 1) + '.' + messageTime.getFullYear(); 

			li.innerHTML = 
				this.opts.messageTemplate
					.replace('$1', respMes.author._id)
					.replace('$2', respMes.author.name)
					.replace('$3', time)
					.replace('$4', respMes.message);

			if ( position === 'append' ) {
				this.opts.wrapper.appendChild(li);
			}
			else {
				var children = this.opts.wrapper.childNodes;
				if ( !children.length ) {
					this.opts.wrapper.appendChild(li);
				}
				else {
					this.opts.wrapper.insertBefore(li, children[0]);
				}
			}
		}

		PublicMessages.prototype.listenChat = function () {
			var self = this;

			DataSource.getMessages(self.opts.dateFirstMessage, this.opts.limit, function (response, status) {
				if ( status == 200 ) {
					var len = response.messages.length;
					for ( var i = len - 1; i >= 0 ; i-- ) {
						self._addMessageOnPage(response.messages[i]);
					}

					if ( len ) {
						if ( !self.opts.dateLastMessage ) {
							self.opts.dateLastMessage = response.messages[len - 1].time;
						}

						self.opts.dateFirstMessage = response.messages[0].time;
					}
				}

				self.listenChat();
			});
		}

		return PublicMessages;
	}
);
define('pages/main',['elements/header', 'elements/publicMessages'], 
	function (Header, PublicMessages) {
		function MainPage() {
			var header = new Header(),
				publicMessages = new PublicMessages();

			publicMessages.getOldMessages()
			publicMessages.listenAddMessage();
			publicMessages.listenLoadMessages();
			publicMessages.listenChat();
		}

		return MainPage;
	}
);
define('pages/privateMessages',['elements/header', 'elements/userName', 'elements/privateMessages'],
	function (Header, UserName, PrivateMessages) {
		function PrivateMessagesPage () {
			var header = new Header(),
				privateMessages = new PrivateMessages();

			if ( window.location.hash ) {
				// show interlocutor info and dialog with him
				privateMessages.appendInterlocutorName();
				privateMessages.loadOldMessages();
				privateMessages.listenAddMessage();
				privateMessages.listenChat();
				privateMessages.listenLoadMessages();
			}
			else {
				// show all dialogs
				document.querySelector('body').classList.add('dialogs');
				
				privateMessages.appendAllDialogs();
			}
		}

		return PrivateMessagesPage;
	}
);
define('pages/user',['elements/header', 'elements/userName'], 
	function (Header, UserName) {
		function UserPage() {
			var header = new Header(),
				userName = new UserName();

			userName.listenChangeName();
		}

		return UserPage;
	}
);
define('pages/userLoactions',['dataSource', 'helpers'],
	function(DataSource, Helpers) {

		function UsersLocationsPage(options) {
			this.defaults = {
				mapId: 'users-map',
				mapOptions: {
					center: new google.maps.LatLng(44.5403, -78.5463),
					zoom: 8,
					mapTypeId: google.maps.MapTypeId.ROADMAP
				}
			}

			this.init(options);
		}

		UsersLocationsPage.prototype = {

			constructor: UsersLocationsPage,

			init: function(options) {
				this.opts = Helpers.extend(options, this.defaults);

				this.userLocationsMap = document.getElementById(this.opts.mapId);

				var map = new google.maps.Map(this.userLocationsMap, this.opts.mapOptions);
			}
		}

		return UsersLocationsPage;
	}
);
define('elements/geolocation',['dataSource'],
	function(DataSource) {

		function Geolocation() {
			this.attempt = 0;
			this.getLocation();
		}

		Geolocation.prototype = {

			constructor: Geolocation,

			getLocation: function() {
				var self = this;
				self.attempt++;

				navigator.geolocation.getCurrentPosition(function(position) {
					self.attempt = 0;
					DataSource.publishLocation({
						lat: position.coords.latitude,
						long: position.coords.longitude
					}, function() {
						self.updateLocation.call(self);
					})
				}, function(err) {
					if (self.attempt < 3) {
						self.getLocation.call(self);
					} else {
						self.attempt = 0;
						self.updateLocation.call(self);
					}
				});
			},

			updateLocation: function() {
				var self = this;
				setTimeout(function() {
					self.getLocation.call(self);
				}, 1800000);
			}
		};

		return Geolocation;
	}
);
define('main',['pages/main', 'pages/privateMessages', 'pages/user','pages/userLoactions','elements/geolocation'], 
	function (MainPage, PrivateMessagesPage, UserPage, UsersLocationsPage, Geolocation) {
		var pages = {
			'main': MainPage,
			'private-messages': PrivateMessagesPage,
			'user': UserPage,
			'locations': UsersLocationsPage
		};

		var body = document.querySelector('body'),
			bodyClass = body.className,
			currentPage = null;

		for ( var page in pages ) {
			if ( bodyClass.indexOf(page) + 1 ) {
				currentPage = pages[page];
				break;
			}
		}
		if ( !currentPage ) {
			return;
		}

		var page = new currentPage(),
			geo = new Geolocation();
	}
);
require.config({
	deps: ['main']
});
define("config", function(){});

